2023-02-05 19:03:23,283 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 (default, Feb 20 2021, 21:17:23) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.2, V11.2.142
GCC: x86_64-linux-gnu-gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.2+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.3+cu102
OpenCV: 4.1.1
MMCV: 1.7.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 19:03:23,284 - mmcls - INFO - Distributed training: False
2023-02-05 19:03:23,430 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'CustomDataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224, backend='pillow'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1), backend='pillow'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='/home/worker1/workspace/code/flower_data/train',
        ann_file='/home/worker1/workspace/code/flower_data/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='/home/worker1/workspace/code/flower_data/val',
        ann_file='/home/worker1/workspace/code/flower_data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='/home/worker1/workspace/code/fruit30_split/val',
        ann_file='/home/worker1/workspace/code/flower_data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.98, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=60)
checkpoint_config = dict(interval=20)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/home/worker1/workspace/code/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
resume_from = None
work_dir = '/home/worker1/workspace/output'
workflow = [('train', 1)]
gpu_ids = range(0, 1)

2023-02-05 19:03:23,431 - mmcls - INFO - Set random seed to 1658404400, deterministic: False
2023-02-05 19:03:28,442 - mmcls - INFO - load checkpoint from local path: /home/worker1/workspace/code/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2023-02-05 19:03:28,484 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([5, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 19:03:28,486 - mmcls - INFO - Start running, host: aistudio@jobpf-5447293-193120-20230205190128, work_dir: /home/worker1/workspace/output
2023-02-05 19:03:28,486 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 19:03:28,487 - mmcls - INFO - workflow: [('train', 1)], max: 60 epochs
2023-02-05 19:03:28,487 - mmcls - INFO - Checkpoints will be saved to /home/worker1/workspace/output by HardDiskBackend.
2023-02-05 19:03:38,555 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.7254
2023-02-05 19:03:47,635 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 93.4859
2023-02-05 19:03:56,845 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 94.0141
2023-02-05 19:04:05,888 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 94.7183
2023-02-05 19:04:14,984 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 92.9577
2023-02-05 19:04:24,082 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.5423
2023-02-05 19:04:33,172 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.6620
2023-02-05 19:04:42,407 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.7183
2023-02-05 19:04:51,522 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 95.7747
2023-02-05 19:05:00,631 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.8944
2023-02-05 19:05:09,703 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 94.7183
2023-02-05 19:05:18,782 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 95.0704
2023-02-05 19:05:27,901 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.7183
2023-02-05 19:05:37,160 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 95.9507
2023-02-05 19:05:46,272 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 95.9507
2023-02-05 19:05:55,425 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.3662
2023-02-05 19:06:04,557 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 95.5986
2023-02-05 19:06:13,725 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 93.8380
2023-02-05 19:06:22,758 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 95.0704
2023-02-05 19:06:30,410 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 19:06:32,001 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 95.0704
2023-02-05 19:06:41,441 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 95.9507
2023-02-05 19:06:50,478 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 95.2465
2023-02-05 19:06:59,698 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 95.5986
2023-02-05 19:07:08,778 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 95.2465
2023-02-05 19:07:17,822 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 95.4225
2023-02-05 19:07:26,887 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 95.7747
2023-02-05 19:07:35,932 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 95.2465
2023-02-05 19:07:45,050 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 95.7747
2023-02-05 19:07:54,138 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.7183
2023-02-05 19:08:03,263 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 95.9507
2023-02-05 19:08:12,480 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 96.4789
2023-02-05 19:08:21,608 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 96.3028
2023-02-05 19:08:30,737 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 96.1268
2023-02-05 19:08:39,931 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 96.3028
2023-02-05 19:08:49,072 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 96.3028
2023-02-05 19:08:58,172 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.5986
2023-02-05 19:09:07,190 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 96.3028
2023-02-05 19:09:16,267 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.9507
2023-02-05 19:09:25,348 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 96.1268
2023-02-05 19:09:32,961 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 19:09:34,519 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.7747
2023-02-05 19:09:43,632 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 96.4789
2023-02-05 19:09:52,911 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 95.7747
2023-02-05 19:10:02,148 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 96.4789
2023-02-05 19:10:11,204 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.9507
2023-02-05 19:10:20,347 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 96.3028
2023-02-05 19:10:29,533 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 96.3028
2023-02-05 19:10:38,753 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 96.6549
2023-02-05 19:10:47,779 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 96.6549
2023-02-05 19:10:57,003 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 96.1268
2023-02-05 19:11:06,046 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 97.0070
2023-02-05 19:11:15,149 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 97.0070
2023-02-05 19:11:24,276 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 96.1268
2023-02-05 19:11:33,314 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 96.4789
2023-02-05 19:11:42,356 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 96.4789
2023-02-05 19:11:51,445 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 96.4789
2023-02-05 19:12:00,536 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 96.6549
2023-02-05 19:12:09,667 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.7747
2023-02-05 19:12:18,957 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 96.4789
2023-02-05 19:12:28,164 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 96.4789
2023-02-05 19:12:35,901 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 19:12:37,457 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 96.8310
