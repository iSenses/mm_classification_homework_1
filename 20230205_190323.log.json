{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 20 2021, 21:17:23) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.2, V11.2.142\nGCC: x86_64-linux-gnu-gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2+cu102\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3+cu102\nOpenCV: 4.1.1\nMMCV: 1.7.1\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMClassification: 0.25.0+", "seed": 1658404400, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224, backend='pillow'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1), backend='pillow'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='/home/worker1/workspace/code/flower_data/train',\n        ann_file='/home/worker1/workspace/code/flower_data/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='/home/worker1/workspace/code/flower_data/val',\n        ann_file='/home/worker1/workspace/code/flower_data/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='/home/worker1/workspace/code/fruit30_split/val',\n        ann_file='/home/worker1/workspace/code/flower_data/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.98, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=60)\ncheckpoint_config = dict(interval=20)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/home/worker1/workspace/code/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\nresume_from = None\nwork_dir = '/home/worker1/workspace/output'\nworkflow = [('train', 1)]\ngpu_ids = range(0, 1)\ndevice = 'cuda'\nseed = 1658404400\n", "CLASSES": null}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.002, "accuracy_top-1": 91.72536}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.00196, "accuracy_top-1": 93.48592}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.00192, "accuracy_top-1": 94.01408}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.00188, "accuracy_top-1": 94.71831}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.00184, "accuracy_top-1": 92.95775}
{"mode": "val", "epoch": 6, "iter": 18, "lr": 0.00181, "accuracy_top-1": 94.54225}
{"mode": "val", "epoch": 7, "iter": 18, "lr": 0.00177, "accuracy_top-1": 93.66197}
{"mode": "val", "epoch": 8, "iter": 18, "lr": 0.00174, "accuracy_top-1": 94.71831}
{"mode": "val", "epoch": 9, "iter": 18, "lr": 0.0017, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 10, "iter": 18, "lr": 0.00167, "accuracy_top-1": 94.89437}
{"mode": "val", "epoch": 11, "iter": 18, "lr": 0.00163, "accuracy_top-1": 94.71831}
{"mode": "val", "epoch": 12, "iter": 18, "lr": 0.0016, "accuracy_top-1": 95.07043}
{"mode": "val", "epoch": 13, "iter": 18, "lr": 0.00157, "accuracy_top-1": 94.71831}
{"mode": "val", "epoch": 14, "iter": 18, "lr": 0.00154, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 15, "iter": 18, "lr": 0.00151, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 16, "iter": 18, "lr": 0.00148, "accuracy_top-1": 94.3662}
{"mode": "val", "epoch": 17, "iter": 18, "lr": 0.00145, "accuracy_top-1": 95.59859}
{"mode": "val", "epoch": 18, "iter": 18, "lr": 0.00142, "accuracy_top-1": 93.83803}
{"mode": "val", "epoch": 19, "iter": 18, "lr": 0.00139, "accuracy_top-1": 95.07043}
{"mode": "val", "epoch": 20, "iter": 18, "lr": 0.00136, "accuracy_top-1": 95.07043}
{"mode": "val", "epoch": 21, "iter": 18, "lr": 0.00134, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 22, "iter": 18, "lr": 0.00131, "accuracy_top-1": 95.24648}
{"mode": "val", "epoch": 23, "iter": 18, "lr": 0.00128, "accuracy_top-1": 95.59859}
{"mode": "val", "epoch": 24, "iter": 18, "lr": 0.00126, "accuracy_top-1": 95.24648}
{"mode": "val", "epoch": 25, "iter": 18, "lr": 0.00123, "accuracy_top-1": 95.42254}
{"mode": "val", "epoch": 26, "iter": 18, "lr": 0.00121, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 27, "iter": 18, "lr": 0.00118, "accuracy_top-1": 95.24648}
{"mode": "val", "epoch": 28, "iter": 18, "lr": 0.00116, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 29, "iter": 18, "lr": 0.00114, "accuracy_top-1": 94.71831}
{"mode": "val", "epoch": 30, "iter": 18, "lr": 0.00111, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 31, "iter": 18, "lr": 0.00109, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 32, "iter": 18, "lr": 0.00107, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 33, "iter": 18, "lr": 0.00105, "accuracy_top-1": 96.12676}
{"mode": "val", "epoch": 34, "iter": 18, "lr": 0.00103, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 35, "iter": 18, "lr": 0.00101, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 36, "iter": 18, "lr": 0.00099, "accuracy_top-1": 95.59859}
{"mode": "val", "epoch": 37, "iter": 18, "lr": 0.00097, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 38, "iter": 18, "lr": 0.00095, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 39, "iter": 18, "lr": 0.00093, "accuracy_top-1": 96.12676}
{"mode": "val", "epoch": 40, "iter": 18, "lr": 0.00091, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 41, "iter": 18, "lr": 0.00089, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 42, "iter": 18, "lr": 0.00087, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 43, "iter": 18, "lr": 0.00086, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 44, "iter": 18, "lr": 0.00084, "accuracy_top-1": 95.95071}
{"mode": "val", "epoch": 45, "iter": 18, "lr": 0.00082, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 46, "iter": 18, "lr": 0.00081, "accuracy_top-1": 96.30282}
{"mode": "val", "epoch": 47, "iter": 18, "lr": 0.00079, "accuracy_top-1": 96.65493}
{"mode": "val", "epoch": 48, "iter": 18, "lr": 0.00077, "accuracy_top-1": 96.65493}
{"mode": "val", "epoch": 49, "iter": 18, "lr": 0.00076, "accuracy_top-1": 96.12676}
{"mode": "val", "epoch": 50, "iter": 18, "lr": 0.00074, "accuracy_top-1": 97.00704}
{"mode": "val", "epoch": 51, "iter": 18, "lr": 0.00073, "accuracy_top-1": 97.00704}
{"mode": "val", "epoch": 52, "iter": 18, "lr": 0.00071, "accuracy_top-1": 96.12676}
{"mode": "val", "epoch": 53, "iter": 18, "lr": 0.0007, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 54, "iter": 18, "lr": 0.00069, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 55, "iter": 18, "lr": 0.00067, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 56, "iter": 18, "lr": 0.00066, "accuracy_top-1": 96.65493}
{"mode": "val", "epoch": 57, "iter": 18, "lr": 0.00065, "accuracy_top-1": 95.77465}
{"mode": "val", "epoch": 58, "iter": 18, "lr": 0.00063, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 59, "iter": 18, "lr": 0.00062, "accuracy_top-1": 96.47887}
{"mode": "val", "epoch": 60, "iter": 18, "lr": 0.00061, "accuracy_top-1": 96.83099}
